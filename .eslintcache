[{"/Users/uryone/Develop/lambnote/src/app/App.tsx":"1","/Users/uryone/Develop/lambnote/src/app/rootReducer.ts":"2","/Users/uryone/Develop/lambnote/src/app/store.ts":"3","/Users/uryone/Develop/lambnote/src/components/LoginForm.tsx":"4","/Users/uryone/Develop/lambnote/src/components/editor/LambEditor.tsx":"5","/Users/uryone/Develop/lambnote/src/components/editor/itemprops/EditorTopMenu.tsx":"6","/Users/uryone/Develop/lambnote/src/components/header/LambHeader.tsx":"7","/Users/uryone/Develop/lambnote/src/components/sidebar/SidebarStyle.ts":"8","/Users/uryone/Develop/lambnote/src/features/notes/noteSlice.ts":"9","/Users/uryone/Develop/lambnote/src/features/users/userSlice.ts":"10","/Users/uryone/Develop/lambnote/src/index.tsx":"11","/Users/uryone/Develop/lambnote/src/lib/graph/AuthService.ts":"12","/Users/uryone/Develop/lambnote/src/lib/graph/AzureConfig.ts":"13","/Users/uryone/Develop/lambnote/src/lib/graph/GraphService.ts":"14","/Users/uryone/Develop/lambnote/src/lib/prosemirror/MySchema.ts":"15","/Users/uryone/Develop/lambnote/src/lib/prosemirror/PmPlugins.ts":"16","/Users/uryone/Develop/lambnote/src/react-app-env.d.ts":"17","/Users/uryone/Develop/lambnote/src/features/pages/pagesSlice.ts":"18","/Users/uryone/Develop/lambnote/src/features/sections/sectionsSlice.ts":"19","/Users/uryone/Develop/lambnote/src/features/sections/SectionsList.tsx":"20","/Users/uryone/Develop/lambnote/src/features/pages/PagesList.tsx":"21"},{"size":1058,"mtime":1607807227830,"results":"22","hashOfConfig":"23"},{"size":487,"mtime":1607761935270,"results":"24","hashOfConfig":"23"},{"size":339,"mtime":1607516916991,"results":"25","hashOfConfig":"23"},{"size":493,"mtime":1607348470082,"results":"26","hashOfConfig":"23"},{"size":2930,"mtime":1607810171031,"results":"27","hashOfConfig":"23"},{"size":2839,"mtime":1607806977929,"results":"28","hashOfConfig":"23"},{"size":1239,"mtime":1607747913232,"results":"29","hashOfConfig":"23"},{"size":131,"mtime":1607348470083,"results":"30","hashOfConfig":"23"},{"size":1735,"mtime":1607761935265,"results":"31","hashOfConfig":"23"},{"size":1805,"mtime":1607761935272,"results":"32","hashOfConfig":"23"},{"size":1156,"mtime":1607432574040,"results":"33","hashOfConfig":"23"},{"size":901,"mtime":1607348470083,"results":"34","hashOfConfig":"23"},{"size":278,"mtime":1603290346000,"results":"35","hashOfConfig":"23"},{"size":3937,"mtime":1607775666058,"results":"36","hashOfConfig":"23"},{"size":1267,"mtime":1607348470083,"results":"37","hashOfConfig":"23"},{"size":473,"mtime":1607348470083,"results":"38","hashOfConfig":"23"},{"size":40,"mtime":1607747914212,"results":"39","hashOfConfig":"23"},{"size":3274,"mtime":1607808472805,"results":"40","hashOfConfig":"23"},{"size":2564,"mtime":1607807109766,"results":"41","hashOfConfig":"23"},{"size":1160,"mtime":1607808411532,"results":"42","hashOfConfig":"23"},{"size":814,"mtime":1607807500718,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t0mbn6",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/uryone/Develop/lambnote/src/app/App.tsx",[],"/Users/uryone/Develop/lambnote/src/app/rootReducer.ts",[],"/Users/uryone/Develop/lambnote/src/app/store.ts",[],"/Users/uryone/Develop/lambnote/src/components/LoginForm.tsx",[],"/Users/uryone/Develop/lambnote/src/components/editor/LambEditor.tsx",["89","90","91","92"],"import React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectPages, updatePageTitle } from 'features/pages/pagesSlice'\n\nimport graphService from 'lib/graph/GraphService'\nimport { EditorTopMenu } from './itemprops/EditorTopMenu'\nimport { EditorState } from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\nimport { DOMParser } from 'prosemirror-model'\nimport { schema } from 'prosemirror-schema-basic'\nimport { mySchema } from '../../lib/prosemirror/MySchema'\nimport { pmPlugins } from '../../lib/prosemirror/PmPlugins'\nimport { PrimaryButton, TextField, ITextFieldStyles } from '@fluentui/react'\n\nexport const LambEditor: React.FC = () => {\n  const dispatch = useDispatch()\n  const [pageTitle, setPageTitle] = useState('')\n  const { currentPageId, currentPageTitle, currentPageRaw } = useSelector(selectPages)\n\n  const pmEditor = useRef<HTMLDivElement>(null)\n  const eView = useRef<EditorView | null>(null)\n  const renderFlgRef = useRef(false)\n\n  const createEditorView = (element: HTMLDivElement | null) => {\n    console.log('editorViewを作成します')\n    if (element) {\n      const eState = EditorState.create({\n        schema,\n        plugins: pmPlugins()\n      })\n      eView.current = new EditorView(element, {\n        state: eState,\n        dispatchTransaction(transaction) {\n          let newState = this.state.apply(transaction)\n          this.updateState(newState)\n        }\n      })\n    }\n  }\n\n  //初回レンダリング時のみ動作する\n  useEffect(() => {\n    createEditorView(pmEditor.current)\n    return () => eView.current?.destroy()\n  }, [])\n\n  //NoteContentStateが更新された場合のみ動作する\n  useEffect(() => {\n    console.log(currentPageRaw)\n    if (renderFlgRef.current) {\n      console.log('editorStateの更新')\n      // const doc = DOMParser.fromSchema(mySchema()).parse(body)\n      // const editorState = EditorState.create({\n      //   doc,\n      //   plugins: pmPlugins()\n      // })\n      // eView.current?.updateState(editorState)\n      setPageTitle(currentPageTitle)\n    } else {\n      renderFlgRef.current = true\n    }\n  }, [currentPageRaw])\n\n  const patchPageTitle = () => {\n    dispatch(updatePageTitle(currentPageId, pageTitle))\n  }\n\n  const handleChange = (e: any, value: string | undefined) => {\n    value ? setPageTitle(value) : setPageTitle('')\n  }\n\n  return (\n    <div className=\"lamb-editor\">\n      <EditorTopMenu />\n      <PrimaryButton text=\"保存\" onClick={patchPageTitle} />\n      <TextField\n        className=\"title-editor\"\n        underlined\n        value={pageTitle}\n        onChange={handleChange}\n        styles={getTitleFormStyles()}\n      />\n      <div className=\"editor\" ref={pmEditor} />\n    </div>\n  )\n}\n\n//スタイル\nconst getTitleFormStyles = (): Partial<ITextFieldStyles> => {\n  return {\n    fieldGroup: [{ height: 46 }],\n    field: [{ 'font-size': 32 }]\n  }\n}\n","/Users/uryone/Develop/lambnote/src/components/editor/itemprops/EditorTopMenu.tsx",[],"/Users/uryone/Develop/lambnote/src/components/header/LambHeader.tsx",[],"/Users/uryone/Develop/lambnote/src/components/sidebar/SidebarStyle.ts",[],"/Users/uryone/Develop/lambnote/src/features/notes/noteSlice.ts",["93"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from 'app/store'\nimport { RootState } from 'app/rootReducer'\nimport graphService from 'lib/graph/GraphService'\nimport { Notebook } from '@microsoft/microsoft-graph-types'\n\ninterface NoteInfo {\n  lambnoteId: string | undefined\n}\n\ntype NoteState = {\n  isLoading: boolean\n  error: string | null\n} & NoteInfo\n\nconst initialState: NoteState = {\n  isLoading: false,\n  error: null,\n  lambnoteId: undefined\n}\n\nconst startLoading = (state: NoteState) => {\n  state.isLoading = true\n}\n\nconst loadingFailed = (state: NoteState, action: PayloadAction<string>) => {\n  state.isLoading = false\n  state.error = action.payload\n  state.lambnoteId = undefined\n}\n\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    startGetNote: startLoading,\n    failureGetNote: loadingFailed,\n    setLambNoteId: (state, action: PayloadAction<string | undefined>) => {\n      state.isLoading = false\n      state.error = null\n      state.lambnoteId = action.payload\n    }\n  }\n})\n\nexport const { startGetNote, failureGetNote, setLambNoteId } = noteSlice.actions\nexport default noteSlice.reducer\n\nexport const selectNote = (state: RootState) => state.note\n\nexport const fetchLambNotebookData = (): AppThunk => async dispatch => {\n  try {\n    dispatch(startGetNote())\n    const notebooks = await graphService.getLambNotebook()\n    console.log('Notebooks: ')\n    console.log(notebooks)\n    let notebook: Notebook\n    if (notebooks.length == 0) {\n      notebook = await graphService.createLambNotebook()\n    } else {\n      notebook = notebooks[0]\n    }\n    dispatch(setLambNoteId(notebook.id))\n  } catch (e) {\n    dispatch(failureGetNote(e.toString()))\n  }\n}\n","/Users/uryone/Develop/lambnote/src/features/users/userSlice.ts",[],"/Users/uryone/Develop/lambnote/src/index.tsx",[],"/Users/uryone/Develop/lambnote/src/lib/graph/AuthService.ts",[],"/Users/uryone/Develop/lambnote/src/lib/graph/AzureConfig.ts",[],"/Users/uryone/Develop/lambnote/src/lib/graph/GraphService.ts",[],"/Users/uryone/Develop/lambnote/src/lib/prosemirror/MySchema.ts",[],"/Users/uryone/Develop/lambnote/src/lib/prosemirror/PmPlugins.ts",[],"/Users/uryone/Develop/lambnote/src/react-app-env.d.ts",[],"/Users/uryone/Develop/lambnote/src/features/pages/pagesSlice.ts",[],"/Users/uryone/Develop/lambnote/src/features/sections/sectionsSlice.ts",[],"/Users/uryone/Develop/lambnote/src/features/sections/SectionsList.tsx",["94"],"import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectNote } from 'features/notes/noteSlice'\nimport { fetchSectionsData, selectSections } from 'features/sections/sectionsSlice'\nimport { fetchPagesData } from 'features/pages/pagesSlice'\n\nimport { Nav, INavLinkGroup, INavLink } from '@fluentui/react'\nimport { sidebarStyles } from 'components/sidebar/SidebarStyle'\n\nexport const SectionsList: React.FC = () => {\n  const dispatch = useDispatch()\n  const { lambnoteId } = useSelector(selectNote)\n  const { sections } = useSelector(selectSections)\n\n  useEffect(() => {\n    if (lambnoteId) {\n      dispatch(fetchSectionsData(lambnoteId))\n    }\n  }, [lambnoteId])\n\n  const navLinkGroups = (): INavLinkGroup[] => {\n    const navList: INavLink[] = []\n    sections.forEach(section => {\n      navList.push({\n        name: section.displayName ?? '',\n        url: '',\n        onClick: () => dispatch(fetchPagesData(section.id ?? ''))\n      })\n    })\n    return [{ links: navList }]\n  }\n\n  return (\n    <div className=\"lamb-sectionbar\">\n      <Nav groups={navLinkGroups()} styles={sidebarStyles} />\n    </div>\n  )\n}\n","/Users/uryone/Develop/lambnote/src/features/pages/PagesList.tsx",[],{"ruleId":"95","severity":1,"message":"96","line":5,"column":8,"nodeType":"97","messageId":"98","endLine":5,"endColumn":20},{"ruleId":"95","severity":1,"message":"99","line":9,"column":10,"nodeType":"97","messageId":"98","endLine":9,"endColumn":19},{"ruleId":"95","severity":1,"message":"100","line":11,"column":10,"nodeType":"97","messageId":"98","endLine":11,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":62,"column":6,"nodeType":"103","endLine":62,"endColumn":22,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":58,"column":26,"nodeType":"107","messageId":"108","endLine":58,"endColumn":28},{"ruleId":"101","severity":1,"message":"109","line":19,"column":6,"nodeType":"103","endLine":19,"endColumn":18,"suggestions":"110"},"@typescript-eslint/no-unused-vars","'graphService' is defined but never used.","Identifier","unusedVar","'DOMParser' is defined but never used.","'mySchema' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentPageTitle'. Either include it or remove the dependency array.","ArrayExpression",["111"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["112"],{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [currentPageRaw, currentPageTitle]",{"range":"117","text":"118"},"Update the dependencies array to be: [dispatch, lambnoteId]",{"range":"119","text":"120"},[2088,2104],"[currentPageRaw, currentPageTitle]",[701,713],"[dispatch, lambnoteId]"]